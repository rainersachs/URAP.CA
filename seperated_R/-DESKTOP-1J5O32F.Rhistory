}
else if (model == "2para"){
sig0 = (parameters %>% filter(parameter == "sig0"))$value
eta0 = (parameters %>% filter(parameter == "eta0"))$value
dE = function(yini, State, Pars){
sig0 = sig0; eta0 = eta0
with(as.list(c(State, Pars)), {
u = vector(length = length(L))
for (i in 1:length(L)) {
u[i] = uniroot(function(d) sig0*6.24*d/L[i]*(1-exp(-1024*d/L[i])) + eta0*(1-exp(-10^5*d)) - I, lower = 0, upper = 1, extendInt = "yes", tol = 10^-10)$root
}
dI = vector(length = length(L))
for (i in 1:length(L)) {
dI[i] = r[i]*(sig0*6.24/L[i]*exp(-1024*u[i]/L[i])*(exp(1024*u[i]/L[i]) + 1024*u[i]/L[i] - 1) + eta0*10^5*exp(-10^5*u[i]))
}
dI = sum(dI)
return(list(c(dI)))
})
}
}
else if (model == "2paraTE"){
kap = (parameters %>% filter(parameter == "kap0"))$value
sig0 = (parameters %>% filter(parameter == "sig0"))$value
dE=function(yini,State,Pars){
kap = kap; sig0 = sig0
with(as.list(c(State, Pars)), {
P = vector(length = length(L))
sig = vector(length = length(L))
u = vector(length = length(L))
for (i in 1:length(L)) {
P[i] = (1-exp(-Z.b[i]/kap))^2
sig[i] = sig0*P[i] + 0.041/6.24*L[i]*(1-P[i])
u[i] = uniroot(function(d) sig[i]*6.24*d/L[i]*(1-exp(-1024*d/L[i])) - I, lower = 0, upper = 1, extendInt = "yes", tol = 10^-10)$root
}
dI = vector(length = length(L))
for (i in 1:length(L)) {
dI[i] = r[i]*(sig[i]*6.24/L[i]*(1 - exp(-1024*u[i]/L[i]) + 1024*u[i]/L[i]*(exp(-1024*u[i]/L[i]))) + etaa[i]*10^5*exp(-10^5*u[i]))
}
dI = sum(dI)
return(list(c(dI)))
})
}
}
else{
stop("Model Not Recognized")
}
pars = NULL; yini = c(I= 0); d = d
out = ode(yini,times = d, dE, pars, method = "radau")
return(out)
}
View(Data_parameter)
ggplot(main_df, aes(x = d, y = CA)) +
geom_point(aes(color = ion))
sig_4para
parameters_4para
source('Synergy.R')
source('Synergy.R')
information_critera_df
SLI_summary
set.seed(19970101)
N <- 500
#Monte-Carlo Parameters from Multivariate Normal Distributions
###Note: We are conditioning on all parameters being positive (by dropping them negative ones and redraw the sample).
sample_parameters = function(model, n = N, cov = T){ #This function samples n sets of parameters from their joint distribution defined by the calibration process.
#Note: The calibrated parameter dataframes from Synergy.R file is required
if (model == "4para"){
calibrated = parameters_4para
covariance = sig_4para
}
else if (model == "3para"){
calibrated = parameters_3para
covariance = sig_3para
}
else if (model == "2para"){
calibrated = parameters_2para
covariance = sig_2para
}
if (!cov){ #If we are not using the covariance matrix, then the parameters will be independent
n_para = nrow(calibrated)
zeros = matrix(0, n_para, n_para)
variances = as.numeric(diag(covariance))
diag(zeros) = variances
covariance = zeros
}
mc_parameters = rmvnorm(n = n, mean = calibrated$value, sigma = covariance)
# negatives = which(apply(mc_parameters, 1, function(row) any(row < 1e-6)))
# n_negatives = length(negatives)
# print(paste("There are ", n_negatives, " rows containing negative values out of ", n, " draws", sep = ""))
# if(n_negatives > 0){
#   mc_parameters = mc_parameters[-negatives,]
#  }
while (nrow(mc_parameters) < n){ #Running a while loop to get enough draws from the multivariate Normal
new_row = rmvnorm(n = 1, mean = calibrated$value, sigma = covariance)
if (!any(new_row < 1e-6)){
mc_parameters = rbind(mc_parameters, new_row)
}
}
colnames(mc_parameters) = calibrated$parameter
return(mc_parameters)
}
#A function that makes monte_carlo parameters into N dataframes
make_datapara <- function(l, model, n = N){
#l is a vector of lists, each list containing N sampled values
name = model
df_list = list()
if (model == "4para"){
paras = c("eta0", "eta1", "sig0", "kap0")
for (i in 1:n){
value = c((l$eta0)[i], (l$eta1)[i], (l$sig0)[i], (l$kap0)[i])
df = data.frame(value, model = name, parameter = paras)
df_list[[i]] = df
}
}
else if (model == "3para"){
paras = c("eta0", "eta1", "sig0")
for (i in 1:n){
value = c((l$eta0)[i], (l$eta1)[i], (l$sig0)[i])
df = data.frame(value, model = name, parameter = paras)
df_list[[i]] = df
}
}
else if (model == "2para"){
paras = c("eta0", "sig0")
for (i in 1:n){
value = c((l$eta0)[i], (l$sig0)[i])
df = data.frame(value, model = name, parameter = paras)
df_list[[i]] = df
}
}
return(df_list)
}
#The main function that calculates the errors for each of the N = 500 sets of parameters.
monte_carlo <- function(ions, r = rep(1/length(ions), length(ions)), para = MC_4para, d = c(seq(0, 0.009, 0.001), seq(0.01, 0.5, by = 0.01)), n = N, background = 0, cov = T, model = NULL, IDER = F){
##SCW: This is a generic function that takes names of the ions in the desired mixture as input and either plots out the ribbon graph or outputs the dataset
#r is a vector that sums up to 1
#ions is a vector of strings of the names of the ions in the mixture
#d is a vector of different dosage
#para is a list (MC_2para, MC_3para, or MC_4para), and it will tell the function which model to use
#If cov = F plots out the result without using the cov matrix
#the maximum number for n is N (in this case N = 500)
#If IDER = T then this outputs ribbons for IDER instead of MIXDER
if (is.null(model)){
model = para$name
}
if (IDER){ #This section is for IDER ribbon
if (length(ions) > 1) {stop("Only one ion allowed for IDER")}
out = IDER(d, ions = ions, model = model, parameters = Data_parameter)
IDER_table = data.frame(d = d, IDER = out + background)
if (cov == F){
MC_parameter = para[[2]]
}
else{
MC_parameter = para[[1]]
}
bad_j = c()
DERs <- matrix(nrow = n, ncol = length(d))
for (j in 1:n) {
der = IDER(d, ions = ions, model = model, parameters = MC_parameter[[j]])
if (class(der) == "try-error"){ #Does not hault the
bad_j = c(bad_j, j)
DERs[j,] <- out
}
else{
DERs[j,] = der
}
cat(paste("  Currently at Monte Carlo step:", toString(j), "of",
toString(n)), sprintf('\r'))
}
if (length(bad_j) > 0){
print(paste("Non-Convergence at i = ", bad_j))
}
ninty_five_CI_lower = numeric(length(d))
ninty_five_CI_upper = numeric(length(d))
for (i in 1:length(d)) {
sample_values <- sort(DERs[, i])
# Returning resulting CI
ninty_five_CI_lower[i] <- as.numeric(quantile(sample_values, 0.025)) + background  #Background default is 0 (for DER)
ninty_five_CI_upper[i] <- as.numeric(quantile(sample_values, 0.975)) + background
}
IDER_table$CI_lower = ninty_five_CI_lower
IDER_table$CI_upper = ninty_five_CI_upper
return(list(IDER_table, bad_j))
}
else{ #This section is for MIXDER ribbon
info_table = main_df %>% group_by(ion, L, Z.b) %>% summarise() %>% filter(ion %in% ions)
info_table = suppressWarnings(left_join(data.frame(ions), info_table, by = c("ions" = "ion")))
L = info_table$L
Z.b = info_table$Z.b
out = MIXDER_function(r = r, L = L, Z.b = Z.b, d = d, model = model, parameters = Data_parameter)
MIXDER = data.frame(d = d, CA = out[, 2] + background)
ninty_five_CI_lower = vector(length = length(d))
ninty_five_CI_upper = vector(length = length(d))
DERs <- matrix(nrow = n, ncol = length(d))
if (cov == F){
MC_parameter = para[[2]]
}
else{
MC_parameter = para[[1]]
}
bad_j = c()
for (j in 1:n) {
der = try(MIXDER_function(r = r, d = d, L = L, Z.b = Z.b, model = model, parameters = MC_parameter[[j]])[, 2])
if (class(der) == "try-error"){ #Does not hault the
bad_j = c(bad_j, j)
DERs[j,] <- out[,2]
}
else{
DERs[j,] = der
}
cat(paste("  Currently at Monte Carlo step:", toString(j), "of",
toString(n)), sprintf('\r'))
}
if (length(bad_j) > 0){
print(paste("Non-Convergence at i = ", bad_j))
}
for (i in 1:length(d)) {
sample_values <- sort(DERs[, i])
# Returning resulting CI
ninty_five_CI_lower[i] <- as.numeric(quantile(sample_values, 0.025)) + background  #Background default is 0 (for DER)
ninty_five_CI_upper[i] <- as.numeric(quantile(sample_values, 0.975)) + background
}
MIXDER$CI_lower = ninty_five_CI_lower
MIXDER$CI_upper = ninty_five_CI_upper
MIXDER$simpleeffect = IDER(d, ions = ions, model = model, parameters = Data_parameter) + background #SCW: I believe we should add background prevalence to every IDER
names = colnames(MIXDER)
for (k in ions){
ider = IDER(d, ions = k, model = model, parameters = Data_parameter)
MIXDER <- cbind(MIXDER, data.frame(ider))
}
colnames(MIXDER) <- c(names, ions)
return(list(MIXDER, bad_j))
}
}
#################################################### Begin Sampling
#4-Parameter Model Monte Carlo Sampling
MC_4para_cov_samples = sample_parameters(model = "4para", n = N, cov = T)
para_4para_cov =  c(eta0 = list(MC_4para_cov_samples[,"eta0"]),
eta1 = list(MC_4para_cov_samples[,"eta1"]),
sig0 = list(MC_4para_cov_samples[,"sig0"]),
kap0 = list(MC_4para_cov_samples[,"kap0"]))
which(para_4para_cov$eta0 < 0)
lengthwhich(para_4para_cov$eta0 < 0)
length(which(para_4para_cov$eta0 < 0))
length(which(para_4para_cov$eta1 < 0))
parameters_4para
sig_4para
length(which(para_4para_cov$kap0 < 0))
length(which(para_4para_cov$sig0 < 0))
source('Synergy.R')
parameters_4para
sig_4para
set.seed(19970101)
N <- 500
#Monte-Carlo Parameters from Multivariate Normal Distributions
###Note: We are conditioning on all parameters being positive (by dropping them negative ones and redraw the sample).
sample_parameters = function(model, n = N, cov = T){ #This function samples n sets of parameters from their joint distribution defined by the calibration process.
#Note: The calibrated parameter dataframes from Synergy.R file is required
if (model == "4para"){
calibrated = parameters_4para
covariance = sig_4para
}
else if (model == "3para"){
calibrated = parameters_3para
covariance = sig_3para
}
else if (model == "2para"){
calibrated = parameters_2para
covariance = sig_2para
}
if (!cov){ #If we are not using the covariance matrix, then the parameters will be independent
n_para = nrow(calibrated)
zeros = matrix(0, n_para, n_para)
variances = as.numeric(diag(covariance))
diag(zeros) = variances
covariance = zeros
}
mc_parameters = rmvnorm(n = n, mean = calibrated$value, sigma = covariance)
# negatives = which(apply(mc_parameters, 1, function(row) any(row < 1e-6)))
# n_negatives = length(negatives)
# print(paste("There are ", n_negatives, " rows containing negative values out of ", n, " draws", sep = ""))
# if(n_negatives > 0){
#   mc_parameters = mc_parameters[-negatives,]
#  }
while (nrow(mc_parameters) < n){ #Running a while loop to get enough draws from the multivariate Normal
new_row = rmvnorm(n = 1, mean = calibrated$value, sigma = covariance)
if (!any(new_row < 1e-6)){
mc_parameters = rbind(mc_parameters, new_row)
}
}
colnames(mc_parameters) = calibrated$parameter
return(mc_parameters)
}
#A function that makes monte_carlo parameters into N dataframes
make_datapara <- function(l, model, n = N){
#l is a vector of lists, each list containing N sampled values
name = model
df_list = list()
if (model == "4para"){
paras = c("eta0", "eta1", "sig0", "kap0")
for (i in 1:n){
value = c((l$eta0)[i], (l$eta1)[i], (l$sig0)[i], (l$kap0)[i])
df = data.frame(value, model = name, parameter = paras)
df_list[[i]] = df
}
}
else if (model == "3para"){
paras = c("eta0", "eta1", "sig0")
for (i in 1:n){
value = c((l$eta0)[i], (l$eta1)[i], (l$sig0)[i])
df = data.frame(value, model = name, parameter = paras)
df_list[[i]] = df
}
}
else if (model == "2para"){
paras = c("eta0", "sig0")
for (i in 1:n){
value = c((l$eta0)[i], (l$sig0)[i])
df = data.frame(value, model = name, parameter = paras)
df_list[[i]] = df
}
}
return(df_list)
}
#The main function that calculates the errors for each of the N = 500 sets of parameters.
monte_carlo <- function(ions, r = rep(1/length(ions), length(ions)), para = MC_4para, d = c(seq(0, 0.009, 0.001), seq(0.01, 0.5, by = 0.01)), n = N, background = 0, cov = T, model = NULL, IDER = F){
##SCW: This is a generic function that takes names of the ions in the desired mixture as input and either plots out the ribbon graph or outputs the dataset
#r is a vector that sums up to 1
#ions is a vector of strings of the names of the ions in the mixture
#d is a vector of different dosage
#para is a list (MC_2para, MC_3para, or MC_4para), and it will tell the function which model to use
#If cov = F plots out the result without using the cov matrix
#the maximum number for n is N (in this case N = 500)
#If IDER = T then this outputs ribbons for IDER instead of MIXDER
if (is.null(model)){
model = para$name
}
if (IDER){ #This section is for IDER ribbon
if (length(ions) > 1) {stop("Only one ion allowed for IDER")}
out = IDER(d, ions = ions, model = model, parameters = Data_parameter)
IDER_table = data.frame(d = d, IDER = out + background)
if (cov == F){
MC_parameter = para[[2]]
}
else{
MC_parameter = para[[1]]
}
bad_j = c()
DERs <- matrix(nrow = n, ncol = length(d))
for (j in 1:n) {
der = IDER(d, ions = ions, model = model, parameters = MC_parameter[[j]])
if (class(der) == "try-error"){ #Does not hault the
bad_j = c(bad_j, j)
DERs[j,] <- out
}
else{
DERs[j,] = der
}
cat(paste("  Currently at Monte Carlo step:", toString(j), "of",
toString(n)), sprintf('\r'))
}
if (length(bad_j) > 0){
print(paste("Non-Convergence at i = ", bad_j))
}
ninty_five_CI_lower = numeric(length(d))
ninty_five_CI_upper = numeric(length(d))
for (i in 1:length(d)) {
sample_values <- sort(DERs[, i])
# Returning resulting CI
ninty_five_CI_lower[i] <- as.numeric(quantile(sample_values, 0.025)) + background  #Background default is 0 (for DER)
ninty_five_CI_upper[i] <- as.numeric(quantile(sample_values, 0.975)) + background
}
IDER_table$CI_lower = ninty_five_CI_lower
IDER_table$CI_upper = ninty_five_CI_upper
return(list(IDER_table, bad_j))
}
else{ #This section is for MIXDER ribbon
info_table = main_df %>% group_by(ion, L, Z.b) %>% summarise() %>% filter(ion %in% ions)
info_table = suppressWarnings(left_join(data.frame(ions), info_table, by = c("ions" = "ion")))
L = info_table$L
Z.b = info_table$Z.b
out = MIXDER_function(r = r, L = L, Z.b = Z.b, d = d, model = model, parameters = Data_parameter)
MIXDER = data.frame(d = d, CA = out[, 2] + background)
ninty_five_CI_lower = vector(length = length(d))
ninty_five_CI_upper = vector(length = length(d))
DERs <- matrix(nrow = n, ncol = length(d))
if (cov == F){
MC_parameter = para[[2]]
}
else{
MC_parameter = para[[1]]
}
bad_j = c()
for (j in 1:n) {
der = try(MIXDER_function(r = r, d = d, L = L, Z.b = Z.b, model = model, parameters = MC_parameter[[j]])[, 2])
if (class(der) == "try-error"){ #Does not hault the
bad_j = c(bad_j, j)
DERs[j,] <- out[,2]
}
else{
DERs[j,] = der
}
cat(paste("  Currently at Monte Carlo step:", toString(j), "of",
toString(n)), sprintf('\r'))
}
if (length(bad_j) > 0){
print(paste("Non-Convergence at i = ", bad_j))
}
for (i in 1:length(d)) {
sample_values <- sort(DERs[, i])
# Returning resulting CI
ninty_five_CI_lower[i] <- as.numeric(quantile(sample_values, 0.025)) + background  #Background default is 0 (for DER)
ninty_five_CI_upper[i] <- as.numeric(quantile(sample_values, 0.975)) + background
}
MIXDER$CI_lower = ninty_five_CI_lower
MIXDER$CI_upper = ninty_five_CI_upper
MIXDER$simpleeffect = IDER(d, ions = ions, model = model, parameters = Data_parameter) + background #SCW: I believe we should add background prevalence to every IDER
names = colnames(MIXDER)
for (k in ions){
ider = IDER(d, ions = k, model = model, parameters = Data_parameter)
MIXDER <- cbind(MIXDER, data.frame(ider))
}
colnames(MIXDER) <- c(names, ions)
return(list(MIXDER, bad_j))
}
}
#################################################### Begin Sampling
#4-Parameter Model Monte Carlo Sampling
MC_4para_cov_samples = sample_parameters(model = "4para", n = N, cov = T)
para_4para_cov =  c(eta0 = list(MC_4para_cov_samples[,"eta0"]),
eta1 = list(MC_4para_cov_samples[,"eta1"]),
sig0 = list(MC_4para_cov_samples[,"sig0"]),
kap0 = list(MC_4para_cov_samples[,"kap0"]))
which(para_4para_cov$eta0 < 0)
length(which(para_4para_cov$eta0 < 0))
length(which(para_4para_cov$eta1 < 0))
length(which(para_4para_cov$kap0 < 0))
##Model Free Plot in Intro
p_intro_all = ggplot(main_df %>% filter(d <= 0.5), aes(x = 100*d, y = 100*CA)) +
geom_point(aes(col = ion,size = 1/sqrt(error))) +
geom_smooth(method = "lm", se = F) +
geom_segment(aes(x = 0, y = 0, xend = 0, yend = 100*BG_CA), size = 2, color = "red") +
geom_errorbar(aes(x = 0, ymin = 0, ymax = 100*(BG_CA + BG_error)), width = 0.5, color = "red") +
theme(panel.background = element_rect(fill = "white", colour = "grey50"),  #Some random tweeks of the ggplot theme. Need someone more artistic to do this part :)
panel.grid.major.y = element_line(colour = "grey80"),
panel.grid.minor.y = element_line(linetype = "dashed", colour = "grey80"),
panel.grid.major.x = element_blank(),
axis.ticks = element_line(),
plot.title = element_text(size = 20, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.title = element_text(size = 12, face = "bold")) +
scale_size_continuous("Accuracy",range = c(1.7, 4)) +
labs(x = "100*Dosage", y = "100*Chromosomal Aberrations", title = "Visual Evidence for NTE", subtitle = "Raw Data")  #axis labels and plot title
p_intro_all
###Individual DER Plot with ribbons (Si170 as example since it has the most data points)
IDER_plot = function(data = DER_df, ion, d_cap = 0.5, var_ribbon = T, para = MC_4para){
name = ion
ion_data = subset(x = data, ion == name & d <= d_cap)
MC_results_cov = monte_carlo(ions = ion, para = para, n = 500, IDER = T)
IDER_cov = MC_results_cov[[1]]
p = ggplot(data = IDER_cov, aes(x = d * 100))
if (var_ribbon){
MC_results_var = monte_carlo(ions = ion, para = para, n = 500, IDER = T, cov = F)
IDER_var = MC_results_var[[1]]
p = p + geom_ribbon(data = IDER_var, aes(ymin = 100 * CI_lower, ymax = 100 * CI_upper, fill = "Variance"), alpha = 0.3) #MonteCarlo Ribbons without cov (blue ribbons)
}
p = p +
geom_ribbon(aes(ymin = 100 * CI_lower, ymax = 100 * CI_upper, fill = "Covariance")) +
geom_line(aes(y = 100 * IDER), size = 1) +  #IDER (colored solid lines)
geom_point(data = ion_data, aes(x= 100*d, y = 100*CA), size = 2) + #Actual Data for these for types of ions (colored points)
geom_errorbar(data = ion_data, aes(x = 100*d, ymin = 100*(CA - error), ymax = 100*(CA + error)), width = 0.5) + #Errorbars for each point from original data
scale_fill_manual("MonteCarlo CI", breaks = c("Covariance", "Variance"), values=c("yellow", "blue")) + #legend for cov vs var
theme(panel.background = element_rect(fill = "white", colour = "grey50"),  #Some random tweeks of the ggplot theme. Need someone more artistic to do this part :)
panel.grid.major.y = element_line(colour = "grey80"),
panel.grid.minor.y = element_line(linetype = "dashed", colour = "grey80"),
panel.grid.major.x = element_blank(),
axis.ticks = element_line(),
plot.title = element_text(size = 20, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.title = element_text(size = 12, face = "bold")
) +
labs(x = "100*Dosage", y = "100*Chromosomal Aberrations", title = "Individual Dose Effect Relationship", subtitle = ion) #axis labels and plot title
return(p)
}
p_Si170 = IDER_plot(ion = "Si170")
##Dose Effect Relationship Plots
DER_df = main_df %>% filter(ion %in% c("Fe300", "Fe450","Fe600", "Ti300", "Si170", "Si260","O77", "O350"))
p_Si170 = IDER_plot(ion = "Si170")
source
source('MonteCarlo.R')
library(ggplot2)
library(tidyr)
##Model Free Plot in Intro
p_intro_all = ggplot(main_df %>% filter(d <= 0.5), aes(x = 100*d, y = 100*CA)) +
geom_point(aes(col = ion,size = 1/sqrt(error))) +
geom_smooth(method = "lm", se = F) +
geom_segment(aes(x = 0, y = 0, xend = 0, yend = 100*BG_CA), size = 2, color = "red") +
geom_errorbar(aes(x = 0, ymin = 0, ymax = 100*(BG_CA + BG_error)), width = 0.5, color = "red") +
theme(panel.background = element_rect(fill = "white", colour = "grey50"),  #Some random tweeks of the ggplot theme. Need someone more artistic to do this part :)
panel.grid.major.y = element_line(colour = "grey80"),
panel.grid.minor.y = element_line(linetype = "dashed", colour = "grey80"),
panel.grid.major.x = element_blank(),
axis.ticks = element_line(),
plot.title = element_text(size = 20, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.title = element_text(size = 12, face = "bold")) +
scale_size_continuous("Accuracy",range = c(1.7, 4)) +
labs(x = "100*Dosage", y = "100*Chromosomal Aberrations", title = "Visual Evidence for NTE", subtitle = "Raw Data")  #axis labels and plot title
p_intro_all
source('MonteCarlo.R')
source('MonteCarlo.R')
LOO_CV_df
information_critera_df
