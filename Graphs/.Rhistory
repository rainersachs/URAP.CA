vendor_award
data222$award <- as.numeric(data222$award) + vendor_award
data222 <- left_join(data22, award_table, by = c("award_key", "sub_award_number", "recipient_role"))
data222$award <- as.numeric(data222$award) + vendor_award
NA
NA + 2
a <- c(1, 2, 3)
b <- c(NA, 2, 3)
a + b
sum(a, b)
as.numeric(b)
as.numeric(b, rm.na = T)
data222 <- left_join(data22, award_table, by = c("award_key", "sub_award_number", "recipient_role"))
data222$award[is.na(data222$award)] <- 0
#Create another relational database
award_table <- group_by(data22, award_key, sub_award_number) %>% summarise(recipient_role = recipient_role[1],recipient_award =local_amount[1] - sum(local_amount[-1])) #This will contain the correct amount for each primary and sub recipient.
data222 <- left_join(data22, award_table, by = c("award_key", "sub_award_number", "recipient_role"))
#Now we need to add the vendors
vendor_award <- as.numeric(data22$recipient_role %in% c("PV", "SV")) * data22$local_amount
data222$recipient_award[is.na(data222$award)] <- 0
data222$recipient_award[is.na(data222$recipient_award)] <- 0
data222$award <- data222$recipient_award + vendor_award
View(data222)
knitr::opts_chunk$set(echo = TRUE)
# List of packages for session
packages = c("dplyr", "ggplot2", "lubridate")
# Install CRAN packages (if not already installed)
inst <- packages %in% installed.packages()
if(length(packages[!inst]) > 0) install.packages(packages[!inst])
# Load packages into session
lapply(packages, library, character.only=TRUE)
data222$award_date <- mdy(data2$award_date) #Convert to standard date class
data222$award_date <- mdy(data222$award_date) #Convert to standard date class
data222$week <- week(data222$award_date)
data222$year <- year(data222$award_date)
data222[2630,]
```{r}
data222 <- left_join(data22, award_table, by = c("award_key", "sub_award_number", "recipient_role"))
#Now we need to add the vendors
vendor_award <- as.numeric(data22$recipient_role %in% c("PV", "SV")) * data22$local_amount
data222$recipient_award[is.na(data222$recipient_award)] <- 0
data222$award <- data222$recipient_award + vendor_award
data222$award_date <- mdy(data222$award_date) #Convert to standard date class
data222$week <- week(data222$award_date)
data222$year <- year(data222$award_date)
write.csv(data222, "award.csv", row.names = F)
View(data)
library(deSolve) # package for solving differential equations
library(minpack.lm) # package for non-linear regression #rks to laz: I think we probably can just use nls() in stats, not nlsLM from linpack. Please check in R documentation if there is any functional difference at all
library(mvtnorm) # package for calculating confidence intervals by Monte Carlo simulation based on variance-covariance matrices #rks to laz: I added to comment.Please check that my addition is OK.
rm(list=ls())
Oxygen = data.frame(d = c(0, .0125, .02, .025, .05, .075, .1, .2, .4),CA = c(.24, 1.66, 2.43, 2.37, 1.16, 2.85, 2.58, 6.94, 6.91), ion = "O", Z =8, L = 75, Z.b = 795)
# Some GCR components are high-speed Oxygen nuclei that are almost fully ionized. d=dose; CA are per hundred cells.
Si = data.frame(d = c(0, .02, .04, .06, .08, .1, .12, .2, .4, .8, 1.2), CA = c(.11, 1.26, 1.14, 1.58, 1.22, 1.89, 3.47, 4.6, 9.79, 27.01, 38.84), ion = "Si", Z = 14, L = 100, Z.b = 690)
Fe600 = data.frame(d = c(0, .01, .02, .04, .06, .08, .1, .12, .2, .4, .8), CA = c(.13, .76, .99, 1.2, 1.74, 1.28, 1.2, 1.7, 3.02, 5.52, 12.42), ion = "Fe600", Z = 26, L = 175, Z.b = 1075)
#600 refers to the energy in MeV per atomic mass unit in this Iron beam
Fe450 = data.frame(d = c(0, .02, .04, .06, .08, .1, .2, .4), CA = c(0, .86, .6, .8, 1.22, 2.02, 2.3, 4.77), ion = "Fe450", Z = 26, L = 195, Z.b = 1245)
Fe300 = data.frame(d = c(0, .005, .01,  0.02, .04, .07, .1, .2, .4, .8), CA = c(0.41, 1.23, 1.47, 1.22, .97, 1.46, 1.21, 4.38, 6.22, 13.6), ion = "Fe300", Z = 26, L = 240, Z.b = 1585)
Ti = data.frame(d = c(0,  0.02, .04, .06, .08, .1, .15, .3, .6), CA = c(0, 1.99, 1.88, 1.44, 2.67, 2.57, 2.50, 5.64, 11.19), ion = "Ti", Z = 22, L = 125, Z.b = 770)
#putting it in one big data frame. #rks: the data frame incorporates a correction to Fe600 at dose 0.06, near line 34
big_df = rbind(Oxygen, Si, Ti, Fe600, Fe450, Fe300)
View(big_df)
big_df$error = c(0.24, 0.63, 0.77, 0.75, 0.52, 0.82, 0.78, 1.31, 1.59, 0.12, 0.05, 0.07, 0.56, 0.18, 0.60, 1.23, 1.60, 1.55, 4.27, 7.21, 0, 0.70, 0.66, 0.59, 0.80, 0.78, 0.48, 1.15, 2.39, 0.16, 0.38, 0.24, 0.21, 0.43, 0.37, 0.54, 0.17, 0.55, 1.75, 2.59, 0, 0.43, 0.34, 0.40, 0.50, 0.64, 0.73, 1.09, 0.29, 0.55, 0.60, 0.55, 0.49, 0.60, 0.54, 1.03, 1.22, 3.62)
#Next modify the data frame to get rid of the zero dose points. Background CA frequency was determined seperately.
modified_df = big_df[big_df$d != 0, ]
modified_df$CA = modified_df$CA*0.01
modified_df$error = modified_df$error*0.01
big_df$CA = big_df$CA * 0.01
big_df$error = big_df$error * 0.01
big_df$errorbar_lower = big_df$CA - big_df$error
big_df$errorbar_upper = big_df$CA + big_df$error
#NTE1 and NTE2 models in 16Cacao using their parameters. NTE is used in 16Cacao to signify that non-targeted effects are included in the model; Conventional targeted effects (TE) are included in all models.
#NTE1 function
NTE1_function = function(d, L, Z.b, eta0 = 0.00011, eta1 = 0.007, sig0 = 6.12, kap = 796) {
0.0017 + eta0*L*exp(-eta1*L)*(d != 0) +
(6.242*(d/L))*(sig0*(1-exp(-Z.b/kap))^2 + 0.041/6.24*L*(1 - (1-exp(-Z.b/kap))^2))
}
#NTE2 function
NTE2_function = function(d, L, Z.b, eta0 = 0.00047, eta1 = 0.011, sig0 = 6.75, kap = 590) {
0.0017 + eta0*L*exp(-eta1*L)*exp(-(1012*(d/L)))*(d != 0) +
(6.242*(d/L))*(1-exp(-(1012*(d/L))))*
(sig0*(1-exp(-Z.b/kap))^2 + 0.041/6.24*L*(1 - (1-exp(-Z.b/kap))^2))
}
#Our IDERs (Individual Dose Effect Relations). Applicable to the 1-ion components of a mixed simulated GCR beam
#Modifying NTE1 and NTE2 by insisting they be twice continuously differentiable and monotonic increasing. Double check NTE1, NTE2, Our model
IDER = function(d, L, Z.b, eta00, eta10, sig00, kap0) {
P = (1-exp(-Z.b/kap0))^2
sig = sig00*P + 0.041/6.24*L*(1-P) # 0.041 +- 0.0051 comes from 16Cacao
eta = eta00*L*exp(-eta10*L)
0.00071 + sig*6.24*d/L*(1-exp(-1024*d/L)) + eta*(1-exp(-10^5*d))  #0.00071 + sig*6.24*d/L*(1-exp(-1024*d/L)) + eta*(1-exp(-10^3*d))#don't use
}
#nls (non-linear least square) method to get the parameters needed (4 parameter estimation) #rks to laz: see note under issues
IDER_model = nlsLM(CA ~ IDER(d, L, Z.b, eta00, eta10, sig00, kap0), data = modified_df, start = list(eta00 = 0.001, eta10 = 0.01, sig00 = 5, kap0 = 500),
weights = (1/(modified_df$error)^2))
coef(IDER_model)
#e.g. eta0 = 1.484687e-04, eta1 = 3.513927e-03, sig0 = 4.149660e+00, kap = 4.688287e+02
vcov(IDER_model)# variance-covariance matrix, needed later for analyzing 95% confidence limits in baseline no-synergy/no-antagonism MIXDER (Mixture dose effect relation)
summary(IDER_model, cor = TRUE) #model parameters and their correlation matrix
#NTE1 and NTE2 models in 16Cacao using their parameters. NTE is used in 16Cacao to signify that non-targeted effects are included in the model; Conventional targeted effects (TE) are included in all models.
#NTE1 function
NTE1_function = function(d, L, Z.b, eta0 = 0.00011, eta1 = 0.007, sig0 = 6.12, kap = 796) {
0.0017 + eta0*L*exp(-eta1*L)*(d != 0) +
(6.242*(d/L))*(sig0*(1-exp(-Z.b/kap))^2 + 0.041/6.24*L*(1 - (1-exp(-Z.b/kap))^2))
}
#NTE2 function
NTE2_function = function(d, L, Z.b, eta0 = 0.00047, eta1 = 0.011, sig0 = 6.75, kap = 590) {
0.0017 + eta0*L*exp(-eta1*L)*exp(-(1012*(d/L)))*(d != 0) +
(6.242*(d/L))*(1-exp(-(1012*(d/L))))*
(sig0*(1-exp(-Z.b/kap))^2 + 0.041/6.24*L*(1 - (1-exp(-Z.b/kap))^2))
}
#Our IDERs (Individual Dose Effect Relations). Applicable to the 1-ion components of a mixed simulated GCR beam
#Modifying NTE1 and NTE2 by insisting they be twice continuously differentiable and monotonic increasing. Double check NTE1, NTE2, Our model
IDER = function(d, L, Z.b, eta00, eta10, sig00, kap0) {
P = (1-exp(-Z.b/kap0))^2
sig = sig00*P + 0.041/6.24*L*(1-P) # 0.041 +- 0.0051 comes from 16Cacao
eta = eta00*L*exp(-eta10*L)
0.00071 + sig*6.24*d/L*(1-exp(-1024*d/L)) + eta*(1-exp(-10^5*d))  #0.00071 + sig*6.24*d/L*(1-exp(-1024*d/L)) + eta*(1-exp(-10^3*d))#don't use
}
#nls (non-linear least square) method to get the parameters needed (4 parameter estimation) #rks to laz: see note under issues
IDER_model = nlsLM(CA ~ IDER(d, L, Z.b, eta00, eta10, sig00, kap0), data = modified_df, start = list(eta00 = 0.001, eta10 = 0.01, sig00 = 5, kap0 = 500),
weights = (1/(modified_df$error)^2))
coef(IDER_model)
#e.g. eta0 = 1.484687e-04, eta1 = 3.513927e-03, sig0 = 4.149660e+00, kap = 4.688287e+02
vcov(IDER_model)# variance-covariance matrix, needed later for analyzing 95% confidence limits in baseline no-synergy/no-antagonism MIXDER (Mixture dose effect relation)
summary(IDER_model, cor = TRUE) #model parameters and their correlation matrix
L_function = function(func, eta0, eta1, sig0, kap) {
a = vector(length = 0)
for (i in 1:length(modified_df[, 1])) {
a = c(a, modified_df$CA[i] - func(d = modified_df$d[i], L = modified_df$L[i], Z.b = modified_df$Z.b[i], eta0 = eta0, eta1 = eta1, sig0 = sig0, kap = kap))
}
return(a^2)
}
L_NTE1 = L_function(NTE1_function, eta0 = 0.00011, eta1 = 0.007, sig0 = 6.12, kap = 796)
#Getting coefficients of the IDER model from nlsLM
XX <- coef(IDER_model)
eta00 <- as.numeric(XX[1])
eta10 <- as.numeric(XX[2])
sig00 <- as.numeric(XX[3])
kap0 <- as.numeric(XX[4])
L_function = function(func, eta0, eta1, sig0, kap) {
a = vector(length = 0)
for (i in 1:length(modified_df[, 1])) {
a = c(a, modified_df$CA[i] - func(d = modified_df$d[i], L = modified_df$L[i], Z.b = modified_df$Z.b[i], eta0 = eta0, eta1 = eta1, sig0 = sig0, kap = kap))
}
return(a^2)
}
L_NTE1 = L_function(NTE1_function, eta0 = 0.00011, eta1 = 0.007, sig0 = 6.12, kap = 796)
L_NTE2 = L_function(NTE2_function, eta0 = 0.00047, eta1 = 0.011, sig0 = 6.75, kap = 590)
L_IDER = L_function(IDER, eta0 = eta00, eta1 = eta10, sig0 = sig00, kap = kap0)
#Since all models are weighted least square regression, will weight our model with our weights to get the WRSS (weighted residual squared sum)
WRSS_NTE1 = sum((1/modified_df$error^2)*L_NTE1)
WRSS_NTE2 = sum((1/modified_df$error^2)*L_NTE2)
WRSS_IDER = sum((1/modified_df$error^2)*L_IDER)
#functions for AIC and BIC calculation for Weighted Least Square regression
AIC_function = function(RSS, k = 4, n = length(modified_df[ , 1])) {
n + n*log(2*pi) + n*log(RSS/n) + 2*(k+1)
}
BIC_function = function(n = length(modified_df[, 1]), k = 4, RSS) {
n + n*log(2*pi) + n*log(RSS/n) + log(n)*(k+1)
}
NTE1_AIC = AIC_function(RSS = WRSS_NTE1)
NTE2_AIC = AIC_function(RSS = WRSS_NTE2)
IDER_AIC = AIC_function(RSS = WRSS_IDER)
NTE1_BIC = BIC_function(RSS = WRSS_NTE1)
NTE2_BIC = BIC_function(RSS = WRSS_NTE2)
IDER_BIC = BIC_function(RSS = WRSS_IDER)
information_critera_df = data.frame(AIC = c(NTE1_AIC, NTE2_AIC, IDER_AIC), BIC = c(NTE1_BIC, NTE2_BIC, IDER_BIC), row.names = c("NTE1 model", "NTE2 model", "IDER model"))
information_critera_df ## RKS runs well up to here. Lots of checks made 8/12/2017
information_critera_df ## RKS runs well up to here. Lots of checks made 8/12/2017
information_critera_df ## RKS runs well up to here. Lots of checks made 8/12/2017
#Getting coefficients of the IDER model from nlsLM
XX <- coef(IDER_model)
eta0_hat <- as.numeric(XX[1])
eta1_hat <- as.numeric(XX[2])
sig0_hat <- as.numeric(XX[3])
kap_hat <- as.numeric(XX[4])
#Getting coefficients of the IDER model from nlsLM
coefs <- coef(IDER_model)
eta0_hat <- as.numeric(coefs[1])
eta1_hat <- as.numeric(coefs[2])
sig0_hat <- as.numeric(coefs[3])
kap_hat <- as.numeric(coefs[4])
#R function to give Information criteria (AIC and BIC) #rks to laz: R has AIC functions. Please check that they give the same ordering (not necessarily the same values) as the ones constructed below by Dae or you.
#L_function gives the residuals squared
L_function = function(func, eta0, eta1, sig0, kap) {
a = vector(length = 0)
for (i in 1:length(modified_df[, 1])) {
a = c(a, modified_df$CA[i] - func(d = modified_df$d[i], L = modified_df$L[i], Z.b = modified_df$Z.b[i], eta0 = eta0, eta1 = eta1, sig0 = sig0, kap = kap))
}
return(a^2)
}
L_NTE1 = L_function(NTE1_function, eta0 = 0.00011, eta1 = 0.007, sig0 = 6.12, kap = 796)
L_NTE2 = L_function(NTE2_function, eta0 = 0.00047, eta1 = 0.011, sig0 = 6.75, kap = 590)
L_IDER = L_function(IDER, eta0 = eta0_hat, eta1 = eta1_hat, sig0 = sig0_hat, kap = kap_hat)
#Since all models are weighted least square regression, will weight our model with our weights to get the WRSS (weighted residual squared sum)
WRSS_NTE1 = sum((1/modified_df$error^2)*L_NTE1)
WRSS_NTE2 = sum((1/modified_df$error^2)*L_NTE2)
WRSS_IDER = sum((1/modified_df$error^2)*L_IDER)
#functions for AIC and BIC calculation for Weighted Least Square regression
AIC_function = function(RSS, k = 4, n = length(modified_df[ , 1])) {
n + n*log(2*pi) + n*log(RSS/n) + 2*(k+1)
}
BIC_function = function(n = length(modified_df[, 1]), k = 4, RSS) {
n + n*log(2*pi) + n*log(RSS/n) + log(n)*(k+1)
}
NTE1_AIC = AIC_function(RSS = WRSS_NTE1)
NTE2_AIC = AIC_function(RSS = WRSS_NTE2)
IDER_AIC = AIC_function(RSS = WRSS_IDER)
NTE1_BIC = BIC_function(RSS = WRSS_NTE1)
NTE2_BIC = BIC_function(RSS = WRSS_NTE2)
IDER_BIC = BIC_function(RSS = WRSS_IDER)
information_critera_df = data.frame(AIC = c(NTE1_AIC, NTE2_AIC, IDER_AIC), BIC = c(NTE1_BIC, NTE2_BIC, IDER_BIC), row.names = c("NTE1 model", "NTE2 model", "IDER model"))
information_critera_df ## RKS runs well up to here. Lots of checks made 8/12/2017
#Baseline no-synergy/no-antagonism MIXDER  based on any input
MIXDER_function = function(r, L, Z.b, d = seq(0, 0.2, by = 0.001), eta0 = eta0_hat, eta1 = eta1_hat, sig0 = sig0_hat ,kap = kap_hat) {
dE=function(yini,State,Pars){
eta0 = eta0; eta1 = eta1; sig0 = sig0; kap = kap
with(as.list(c(State, Pars)), {
P = vector(length = length(L))
sig = vector(length = length(L))
etaa = vector(length = length(L))
u = vector(length = length(L))
for (i in 1:length(L)) {
P[i] = (1-exp(-Z.b[i]/kap))^2
sig[i] = sig0*P[i] + 0.041/6.24*L[i]*(1-P[i])
etaa[i] = eta0*L[i]*exp(-eta1*L[i])
u[i] = uniroot(function(d) sig[i]*6.24*d/L[i]*(1-exp(-1024*d/L[i])) + etaa[i]*(1-exp(-10^5*d)) - I, lower = 0, upper = 1, extendInt = "yes", tol = 10^-10)$root
}
dI = vector(length = length(L))
for (i in 1:length(L)) {
dI[i] = r[i]*(sig[i]*6.24/L[i]*exp(-1024*u[i]/L[i])*(exp(1024*u[i]/L[i]) + 1024*u[i]/L[i] - 1) + etaa[i]*10^5*exp(-10^5*u[i]))
}
dI = sum(dI)
return(list(c(dI)))
})
}
pars = NULL; yini = c(I= 0); d = d
out = ode(yini,times = d, dE, pars, method = "radau")
return(out)
}
#Graphs for NTE1 and our IDER models: 12_ion figure
#When creating any sort of MIXDER figures we use this IDER now without the background effect then add the background effect at the end.
IDER = function(d, L, Z.b, eta0 = eta0_hat, eta1 = eta1_hat, sig0 = sig0_hat, kap = kap_hat) {
P = (1-exp(-Z.b/kap_hat))^2
sig = sig0*P + 0.041/6.24*L*(1-P)
eta = eta0*L*exp(-eta1*L)
sig*6.24*d/L*(1-exp(-1024*d/L)) + eta*(1-exp(-10^5*d))#sig*6.24*d/L*(1-exp(-1024*d/L)) + eta*(1-exp(-.5*10^3*d))#don't use
}
r=rep(1/6,6);L = c(75, 100, 125, 175, 195, 240); Z.b = c(595, 690, 770, 1075, 1245, 1585);dose=seq(0,.4,by=0.001)
MX=MIXDER_function(r,L,Z.b,d=dose)#for this mixture can't go much above 0.6#
plot(MX[,1],MX[,2],type='l',bty='l',col='red',ann='F',ylim=c(0,.10))
for (ii in 1:length(L)){lines(dose,IDER (dose,L[ii],Z.b[ii]),col='green')}
#SEA
SEA=function(d){
IDER(d/6,L[1],Z.b[1])+IDER(d/6,L[2],Z.b[2])+IDER(d/6,L[3],Z.b[3])+IDER(d/6,L[4],Z.b[4])+IDER(d/6,L[5],Z.b[5])+IDER(d/6,L[6],Z.b[6])
}
lines(dose,SEA(dose),lty=2)
dose
lines(x= d2*100 , y = two_ion_MIXDER_small$CI_lower * 100, lty = 'dashed', col = 'red')
library(deSolve) # package for solving differential equations
library(minpack.lm) # package for non-linear regression #rks to laz: I think we probably can just use nls() in stats, not nlsLM from linpack. Please check in R documentation if there is any functional difference at all
library(mvtnorm) # package for calculating confidence intervals by Monte Carlo simulation based on variance-covariance matrices #rks to laz: I added to comment.Please check that my addition is OK.
#rm(list=ls())
set.seed(19970101)
####2-ion 60 dose
d_2ion = c(seq(0, 0.009, 0.001), seq(0.01, 0.5, by = 0.01))
#Assuming the working directory is the location of this R file (On Github the csv file is in the same location as this R file)
two_ion_MIXDER = read.csv("2ionMonteCarlo.csv") #This is the Monte Carlo results with seed 19970101
#The graphing part
d1 <- two_ion_MIXDER$d
CA1 <- two_ion_MIXDER$CA
simpleeffect1 <- two_ion_MIXDER$simpleeffect
silicon1 <- two_ion_MIXDER$silicon
ironsix1 <- two_ion_MIXDER$ironsix
plot(x = d1 * 100, y = CA1 * 100, type = "l", col = "red", main="2-ion Model", sub="Full 60 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d1 * 100, y = simpleeffect1 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d1 * 100, y = silicon1* 100, col = "green")
lines(x = d1 * 100, y = ironsix1* 100, col = "green")
lines(x= d1*100 , y = two_ion_MIXDER$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d1*100 , y = two_ion_MIXDER$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d1*100,rev(d1*100)),c(two_ion_MIXDER$CI_lower * 100, rev(two_ion_MIXDER$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####2-ion 12 dose
d_2ion_small = d[seq(1,60, by = 5)]
two_ion_MIXDER_small <- two_ion_MIXDER[seq(1,60, by = 5), ]
#The graphing part
d2 <- two_ion_MIXDER_small$d
CA2 <- two_ion_MIXDER_small$CA
simpleeffect2 <- two_ion_MIXDER_small$simpleeffect
silicon2 <- two_ion_MIXDER_small$silicon
ironsix2 <- two_ion_MIXDER_small$ironsix
plot(x = d2 * 100, y = CA2 * 100, type = "l", col = "red", main="2-ion Model", sub="12 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d2 * 100, y = simpleeffect2 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d2 * 100, y = silicon2* 100, col = "green")
lines(x = d2 * 100, y = ironsix2* 100, col = "green")
lines(x= d2*100 , y = two_ion_MIXDER_small$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d2*100 , y = two_ion_MIXDER_small$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d2*100,rev(d2*100)),c(two_ion_MIXDER_small$CI_lower * 100, rev(two_ion_MIXDER_small$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####2-ion 12 dose without covariances (larger CI's)
#Assuming the working directory is the location of this R file (On Github the csv file is in the same location as this R file)
two_ion_MIXDER_small_var <- read.csv("2ionMonteCarlovar.csv")
#The graphing part
plot(x = d2 * 100, y = CA2 * 100, type = "l", col = "red", main="2-ion Model", sub="12 Doses without Covariances",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d2 * 100, y = simpleeffect2 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d2 * 100, y = silicon2* 100, col = "green")
lines(x = d2 * 100, y = ironsix2* 100, col = "green")
lines(x= d2*100 , y = two_ion_MIXDER_small_var$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d2*100 , y = two_ion_MIXDER_small_var$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d2*100,rev(d2*100)),c(two_ion_MIXDER_small_var$CI_lower * 100, rev(two_ion_MIXDER_small_var$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####6-ion 50 dose
d_6ion <- c(seq(0, 0.009, 0.001), seq(0.01, 0.4, by = 0.01))
six_ion_MIXDER <- read.csv("6ionMonteCarlo.csv")
#the graphing part
d11 <- six_ion_MIXDER$d
CA11 <- six_ion_MIXDER$CA
simpleeffect11 <- six_ion_MIXDER$simpleeffect
silicon11 <- six_ion_MIXDER$silicon
titanium11 <- six_ion_MIXDER$titanium
ironthree11 <- six_ion_MIXDER$ironthree
ironfour11 <- six_ion_MIXDER$ironfour
ironsix11 <- six_ion_MIXDER$ironsix
oxygen11 <- six_ion_MIXDER$oxygen
plot(x = d11 * 100, y = CA11 * 100, type = "l", col = "red", main="6-ion Model", sub="Full 50 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d11 * 100, y = simpleeffect11 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d11 * 100, y = silicon11* 100, col = "green")
lines(x = d11 * 100, y = titanium11* 100, col = "green")
lines(x = d11 * 100, y = ironthree11* 100, col = "green")
lines(x = d11 * 100, y = ironfour11* 100, col = "green")
lines(x = d11 * 100, y = ironsix11* 100, col = "green")
lines(x = d11 * 100, y = oxygen11* 100, col = "green")
lines(x= d11*100 , y = six_ion_MIXDER$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d11*100 , y = six_ion_MIXDER$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d11*100,rev(d11*100)),c(six_ion_MIXDER$CI_lower * 100, rev(six_ion_MIXDER$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####6-ion 10 dose
d_6ion_small <- d_6ion[seq(1, 50, by = 5)]
six_ion_MIXDER_small <- six_ion_MIXDER[seq(1, 50, by = 5),]
#the graphing part
d22 <- six_ion_MIXDER_small$d
CA22 <- six_ion_MIXDER_small$CA
simpleeffect22 <- six_ion_MIXDER_small$simpleeffect
silicon22 <- six_ion_MIXDER_small$silicon
titanium22 <- six_ion_MIXDER_small$titanium
ironthree22 <- six_ion_MIXDER_small$ironthree
ironfour22 <- six_ion_MIXDER_small$ironfour
ironsix22 <- six_ion_MIXDER_small$ironsix
oxygen22 <- six_ion_MIXDER_small$oxygen
plot(x = d22 * 100, y = CA22 * 100, type = "l", col = "red", main="6-ion Model", sub="10 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d22 * 100, y = simpleeffect22 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d22 * 100, y = silicon22* 100, col = "green")
lines(x = d22 * 100, y = titanium22* 100, col = "green")
lines(x = d22 * 100, y = ironthree22* 100, col = "green")
lines(x = d22 * 100, y = ironfour22* 100, col = "green")
lines(x = d22 * 100, y = ironsix22* 100, col = "green")
lines(x = d22 * 100, y = oxygen22* 100, col = "green")
lines(x= d22*100 , y = six_ion_MIXDER_small$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d22*100 , y = six_ion_MIXDER_small$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d22*100,rev(d22*100)),c(six_ion_MIXDER_small$CI_lower * 100, rev(six_ion_MIXDER_small$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####6-ion 10 dose without covariances (larger Ci's)
six_ion_MIXDER_small_var <- read.csv("6ionMonteCarlovar.csv")
#the graphing part
d22 <- six_ion_MIXDER_small_var$d
CA22 <- six_ion_MIXDER_small_var$CA
simpleeffect22 <- six_ion_MIXDER_small_var$simpleeffect
silicon22 <- six_ion_MIXDER_small_var$silicon
titanium22 <- six_ion_MIXDER_small_var$titanium
ironthree22 <- six_ion_MIXDER_small_var$ironthree
ironfour22 <- six_ion_MIXDER_small_var$ironfour
ironsix22 <- six_ion_MIXDER_small_var$ironsix
oxygen22 <- six_ion_MIXDER_small_var$oxygen
plot(x = d22 * 100, y = CA22 * 100, type = "l", col = "red", main="6-ion Model", sub="10 Doses without Covariances",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d22 * 100, y = simpleeffect22 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d22 * 100, y = silicon22* 100, col = "green")
lines(x = d22 * 100, y = titanium22* 100, col = "green")
lines(x = d22 * 100, y = ironthree22* 100, col = "green")
lines(x = d22 * 100, y = ironfour22* 100, col = "green")
lines(x = d22 * 100, y = ironsix22* 100, col = "green")
lines(x = d22 * 100, y = oxygen22* 100, col = "green")
lines(x= d22*100 , y = six_ion_MIXDER_small_var$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d22*100 , y = six_ion_MIXDER_small_var$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d22*100,rev(d22*100)),c(six_ion_MIXDER_small_var$CI_lower * 100, rev(six_ion_MIXDER_small_var$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
setwd("C:/Users/peter/OneDrive/UC Berkeley/Research/Radiology, Sachs/Github Repo/URAP.CA/Graphs")
library(deSolve) # package for solving differential equations
library(minpack.lm) # package for non-linear regression #rks to laz: I think we probably can just use nls() in stats, not nlsLM from linpack. Please check in R documentation if there is any functional difference at all
library(mvtnorm) # package for calculating confidence intervals by Monte Carlo simulation based on variance-covariance matrices #rks to laz: I added to comment.Please check that my addition is OK.
#rm(list=ls())
set.seed(19970101)
####2-ion 60 dose
d_2ion = c(seq(0, 0.009, 0.001), seq(0.01, 0.5, by = 0.01))
#Assuming the working directory is the location of this R file (On Github the csv file is in the same location as this R file)
two_ion_MIXDER = read.csv("2ionMonteCarlo.csv") #This is the Monte Carlo results with seed 19970101
#The graphing part
d1 <- two_ion_MIXDER$d
CA1 <- two_ion_MIXDER$CA
simpleeffect1 <- two_ion_MIXDER$simpleeffect
silicon1 <- two_ion_MIXDER$silicon
ironsix1 <- two_ion_MIXDER$ironsix
plot(x = d1 * 100, y = CA1 * 100, type = "l", col = "red", main="2-ion Model", sub="Full 60 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d1 * 100, y = simpleeffect1 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d1 * 100, y = silicon1* 100, col = "green")
lines(x = d1 * 100, y = ironsix1* 100, col = "green")
lines(x= d1*100 , y = two_ion_MIXDER$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d1*100 , y = two_ion_MIXDER$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d1*100,rev(d1*100)),c(two_ion_MIXDER$CI_lower * 100, rev(two_ion_MIXDER$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####2-ion 12 dose
d_2ion_small = d[seq(1,60, by = 5)]
two_ion_MIXDER_small <- two_ion_MIXDER[seq(1,60, by = 5), ]
#The graphing part
d2 <- two_ion_MIXDER_small$d
CA2 <- two_ion_MIXDER_small$CA
simpleeffect2 <- two_ion_MIXDER_small$simpleeffect
silicon2 <- two_ion_MIXDER_small$silicon
ironsix2 <- two_ion_MIXDER_small$ironsix
plot(x = d2 * 100, y = CA2 * 100, type = "l", col = "red", main="2-ion Model", sub="12 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d2 * 100, y = simpleeffect2 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d2 * 100, y = silicon2* 100, col = "green")
lines(x = d2 * 100, y = ironsix2* 100, col = "green")
lines(x= d2*100 , y = two_ion_MIXDER_small$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d2*100 , y = two_ion_MIXDER_small$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d2*100,rev(d2*100)),c(two_ion_MIXDER_small$CI_lower * 100, rev(two_ion_MIXDER_small$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####2-ion 12 dose without covariances (larger CI's)
#Assuming the working directory is the location of this R file (On Github the csv file is in the same location as this R file)
two_ion_MIXDER_small_var <- read.csv("2ionMonteCarlovar.csv")
#The graphing part
plot(x = d2 * 100, y = CA2 * 100, type = "l", col = "red", main="2-ion Model", sub="12 Doses without Covariances",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d2 * 100, y = simpleeffect2 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d2 * 100, y = silicon2* 100, col = "green")
lines(x = d2 * 100, y = ironsix2* 100, col = "green")
lines(x= d2*100 , y = two_ion_MIXDER_small_var$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d2*100 , y = two_ion_MIXDER_small_var$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d2*100,rev(d2*100)),c(two_ion_MIXDER_small_var$CI_lower * 100, rev(two_ion_MIXDER_small_var$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####6-ion 50 dose
d_6ion <- c(seq(0, 0.009, 0.001), seq(0.01, 0.4, by = 0.01))
six_ion_MIXDER <- read.csv("6ionMonteCarlo.csv")
#the graphing part
d11 <- six_ion_MIXDER$d
CA11 <- six_ion_MIXDER$CA
simpleeffect11 <- six_ion_MIXDER$simpleeffect
silicon11 <- six_ion_MIXDER$silicon
titanium11 <- six_ion_MIXDER$titanium
ironthree11 <- six_ion_MIXDER$ironthree
ironfour11 <- six_ion_MIXDER$ironfour
ironsix11 <- six_ion_MIXDER$ironsix
oxygen11 <- six_ion_MIXDER$oxygen
plot(x = d11 * 100, y = CA11 * 100, type = "l", col = "red", main="6-ion Model", sub="Full 50 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d11 * 100, y = simpleeffect11 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d11 * 100, y = silicon11* 100, col = "green")
lines(x = d11 * 100, y = titanium11* 100, col = "green")
lines(x = d11 * 100, y = ironthree11* 100, col = "green")
lines(x = d11 * 100, y = ironfour11* 100, col = "green")
lines(x = d11 * 100, y = ironsix11* 100, col = "green")
lines(x = d11 * 100, y = oxygen11* 100, col = "green")
lines(x= d11*100 , y = six_ion_MIXDER$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d11*100 , y = six_ion_MIXDER$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d11*100,rev(d11*100)),c(six_ion_MIXDER$CI_lower * 100, rev(six_ion_MIXDER$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####6-ion 10 dose
d_6ion_small <- d_6ion[seq(1, 50, by = 5)]
six_ion_MIXDER_small <- six_ion_MIXDER[seq(1, 50, by = 5),]
#the graphing part
d22 <- six_ion_MIXDER_small$d
CA22 <- six_ion_MIXDER_small$CA
simpleeffect22 <- six_ion_MIXDER_small$simpleeffect
silicon22 <- six_ion_MIXDER_small$silicon
titanium22 <- six_ion_MIXDER_small$titanium
ironthree22 <- six_ion_MIXDER_small$ironthree
ironfour22 <- six_ion_MIXDER_small$ironfour
ironsix22 <- six_ion_MIXDER_small$ironsix
oxygen22 <- six_ion_MIXDER_small$oxygen
plot(x = d22 * 100, y = CA22 * 100, type = "l", col = "red", main="6-ion Model", sub="10 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d22 * 100, y = simpleeffect22 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d22 * 100, y = silicon22* 100, col = "green")
lines(x = d22 * 100, y = titanium22* 100, col = "green")
lines(x = d22 * 100, y = ironthree22* 100, col = "green")
lines(x = d22 * 100, y = ironfour22* 100, col = "green")
lines(x = d22 * 100, y = ironsix22* 100, col = "green")
lines(x = d22 * 100, y = oxygen22* 100, col = "green")
lines(x= d22*100 , y = six_ion_MIXDER_small$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d22*100 , y = six_ion_MIXDER_small$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d22*100,rev(d22*100)),c(six_ion_MIXDER_small$CI_lower * 100, rev(six_ion_MIXDER_small$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####6-ion 10 dose without covariances (larger Ci's)
six_ion_MIXDER_small_var <- read.csv("6ionMonteCarlovar.csv")
#the graphing part
d22 <- six_ion_MIXDER_small_var$d
CA22 <- six_ion_MIXDER_small_var$CA
simpleeffect22 <- six_ion_MIXDER_small_var$simpleeffect
silicon22 <- six_ion_MIXDER_small_var$silicon
titanium22 <- six_ion_MIXDER_small_var$titanium
ironthree22 <- six_ion_MIXDER_small_var$ironthree
ironfour22 <- six_ion_MIXDER_small_var$ironfour
ironsix22 <- six_ion_MIXDER_small_var$ironsix
oxygen22 <- six_ion_MIXDER_small_var$oxygen
plot(x = d22 * 100, y = CA22 * 100, type = "l", col = "red", main="6-ion Model", sub="10 Doses without Covariances",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d22 * 100, y = simpleeffect22 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d22 * 100, y = silicon22* 100, col = "green")
lines(x = d22 * 100, y = titanium22* 100, col = "green")
lines(x = d22 * 100, y = ironthree22* 100, col = "green")
lines(x = d22 * 100, y = ironfour22* 100, col = "green")
lines(x = d22 * 100, y = ironsix22* 100, col = "green")
lines(x = d22 * 100, y = oxygen22* 100, col = "green")
lines(x= d22*100 , y = six_ion_MIXDER_small_var$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d22*100 , y = six_ion_MIXDER_small_var$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d22*100,rev(d22*100)),c(six_ion_MIXDER_small_var$CI_lower * 100, rev(six_ion_MIXDER_small_var$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
