ninty_five_CI_upper = vector(length = 0)
a = vector(length = 0)
for (i in 2:length(d1)) {
a = CI_function_MIXDER_var(d = c(0, two_ion_MIXDER_var$d[i]), r = rep(1/2, times = 2), L=c(100, 175), Z.b = c(690, 1075))
ninty_five_CI_lower = c(ninty_five_CI_lower, a[1])
ninty_five_CI_upper = c(ninty_five_CI_upper, a[2])
}
two_ion_MIXDER_var = data.frame(d = out[, 1], CA = out[, 2] + 0.00071)
# Confidence Interval for two-ion without variance and covariance matrix.
ninty_five_CI_lower = vector(length = 0)
ninty_five_CI_upper = vector(length = 0)
a = vector(length = 0)
for (i in 2:length(d1)) {
print(d1[i])
a = CI_function_MIXDER_var(d = c(0, two_ion_MIXDER_var$d[i]), r = rep(1/2, times = 2), L=c(100, 175), Z.b = c(690, 1075))
ninty_five_CI_lower = c(ninty_five_CI_lower, a[1])
ninty_five_CI_upper = c(ninty_five_CI_upper, a[2])
}
two_ion_MIXDER_var = data.frame(d = out[, 1], CA = out[, 2] + 0.00071)[seq(1,60, by = 5), ]
# Confidence Interval for two-ion without variance and covariance matrix.
ninty_five_CI_lower = vector(length = 0)
ninty_five_CI_upper = vector(length = 0)
a = vector(length = 0)
for (i in 2:length(d1)) {
print(d1[i])
a = CI_function_MIXDER_var(d = c(0, two_ion_MIXDER_var$d[i]), r = rep(1/2, times = 2), L=c(100, 175), Z.b = c(690, 1075))
ninty_five_CI_lower = c(ninty_five_CI_lower, a[1])
ninty_five_CI_upper = c(ninty_five_CI_upper, a[2])
}
two_ion_MIXDER_var = data.frame(d = out[, 1], CA = out[, 2] + 0.00071)[seq(1,60, by = 5), ]
d1 <- two_ion_MIXDER_var
# Confidence Interval for two-ion without variance and covariance matrix.
ninty_five_CI_lower = vector(length = 0)
ninty_five_CI_upper = vector(length = 0)
a = vector(length = 0)
for (i in 2:length(d1)) {
print(d1[i])
a = CI_function_MIXDER_var(d = c(0, two_ion_MIXDER_var$d[i]), r = rep(1/2, times = 2), L=c(100, 175), Z.b = c(690, 1075))
ninty_five_CI_lower = c(ninty_five_CI_lower, a[1])
ninty_five_CI_upper = c(ninty_five_CI_upper, a[2])
}
two_ion_MIXDER_var = data.frame(d = out[, 1], CA = out[, 2] + 0.00071)[seq(1,60, by = 5), ]
d1 <- two_ion_MIXDER_var$d
# Confidence Interval for two-ion without variance and covariance matrix.
ninty_five_CI_lower = vector(length = 0)
ninty_five_CI_upper = vector(length = 0)
a = vector(length = 0)
for (i in 2:length(d1)) {
print(d1[i])
a = CI_function_MIXDER_var(d = c(0, two_ion_MIXDER_var$d[i]), r = rep(1/2, times = 2), L=c(100, 175), Z.b = c(690, 1075))
ninty_five_CI_lower = c(ninty_five_CI_lower, a[1])
ninty_five_CI_upper = c(ninty_five_CI_upper, a[2])
}
set.seed(19970101)
MM <- 500
#Sample parameters from their distributions with covariances
sig = vcov(IDER_model)
monte_carlo_parameters = rmvnorm(n = MM, mean = c(eta0 = eta0_hat, eta1 = eta1_hat, sig0 = sig0_hat, kap = kap_hat), sigma = sig)
eta0_MC = monte_carlo_parameters[, 1]
eta1_MC = monte_carlo_parameters[, 2]
sig0_MC = monte_carlo_parameters[, 3]
kap_MC = monte_carlo_parameters[, 4]
kap_MC[kap_MC <= 1e-6] = 1e-5 #10 of them were fixed
#Sample parameters from their distributions without covariances
eta0_MC_var = rnorm(MM, mean = eta0_hat, sd = 4.631e-05)
eta1_MC_var = rnorm(MM, mean = eta1_hat, sd = 1.617e-04)
sig0_MC_var = rnorm(MM, mean = sig0_hat, sd = 1.966e+00)
kap_MC_var = rnorm(MM, mean = kap_hat, sd = 2.628e+02)
kap_MC_var[kap_MC_var <= 1e-6] = 1e-5
#note because our last parameter were less significant when inputting our variance covariance matrix the parameters had to actually be readjusted to fix for negative value. This is important because if kap parameter went negative our model is nonsensical. (Luckily the fix was only for exactly 10 out of 1000 MC samples or only 1%)
#MIXDER of iron 2.
d1 = c(seq(0, 0.009, 0.001), seq(0.01, 0.5, by = 0.01))
out = MIXDER_function(r = rep(1/2, times = 2), L = c(100, 175), Z.b = c(690, 1075), d = d1, eta0 = eta0_hat, eta1 = eta1_hat, sig0 = sig0_hat, kap = kap_hat)
two_ion_MIXDER = data.frame(d = out[, 1], CA = out[, 2] + 0.00071)
two_ion_MIXDER_var = data.frame(d = out[, 1], CA = out[, 2] + 0.00071)[seq(1,60, by = 5), ]
d1 <- two_ion_MIXDER_var$d
# Confidence Interval for two-ion without variance and covariance matrix.
ninty_five_CI_lower = vector(length = 0)
ninty_five_CI_upper = vector(length = 0)
a = vector(length = 0)
for (i in 2:length(d1)) {
print(d1[i])
a = CI_function_MIXDER_var(d = c(0, two_ion_MIXDER_var$d[i]), r = rep(1/2, times = 2), L=c(100, 175), Z.b = c(690, 1075))
ninty_five_CI_lower = c(ninty_five_CI_lower, a[1])
ninty_five_CI_upper = c(ninty_five_CI_upper, a[2])
}
sig = vcov(IDER_model)
monte_carlo_parameters = rmvnorm(n = MM, mean = c(eta0 = eta0_hat, eta1 = eta1_hat, sig0 = sig0_hat, kap = kap_hat), sigma = sig)
eta0_MC = monte_carlo_parameters[, 1]
eta1_MC = monte_carlo_parameters[, 2]
sig0_MC = monte_carlo_parameters[, 3]
kap_MC = monte_carlo_parameters[, 4]
sum(kap_MC <=1e_6)
sum(kap_MC <=1e-6)
length(kap_MC)
sum(kap_MC_var <=1e_6)
sum(kap_MC_var <=1e-6)
#MIXDER of iron 2.
d1 = c(seq(0, 0.009, 0.001), seq(0.01, 0.5, by = 0.01))
out = MIXDER_function(r = rep(1/2, times = 2), L = c(100, 175), Z.b = c(690, 1075), d = d1, eta0 = eta0_hat, eta1 = eta1_hat, sig0 = sig0_hat, kap = kap_hat)
two_ion_MIXDER = data.frame(d = out[, 1], CA = out[, 2] + 0.00071)
two_ion_MIXDER_var = data.frame(d = out[, 1], CA = out[, 2] + 0.00071)
# Confidence Interval for two-ion without variance and covariance matrix.
ninty_five_CI_lower = vector(length = 0)
ninty_five_CI_upper = vector(length = 0)
a = vector(length = 0)
for (i in 2:length(d1)) {
print(d1[i])
a = CI_function_MIXDER_var(d = c(0, two_ion_MIXDER_var$d[i]), r = rep(1/2, times = 2), L=c(100, 175), Z.b = c(690, 1075))
ninty_five_CI_lower = c(ninty_five_CI_lower, a[1])
ninty_five_CI_upper = c(ninty_five_CI_upper, a[2])
}
two_ion_MIXDER_var$CI_lower = c(0, ninty_five_CI_lower) + 0.00071
two_ion_MIXDER_var$CI_upper = c(0, ninty_five_CI_upper) + 0.00071
#Get the simple effect additivity MIXDER
two_ion_MIXDER_var$simpleeffect = IDER(d = 0.5*d1, L = 100, Z.b = 690) + IDER(d = 0.5*d1, L = 175, Z.b = 1075) + 0.00071
#Get the individual IDERS
two_ion_MIXDER_var$silicon = IDER(d = d1, L = 100, Z.b = 690) + 0.00071
two_ion_MIXDER_var$ironsix = IDER(d = d1, L = 175, Z.b = 1075) + 0.00071
d1 <- two_ion_MIXDER_var$d
CA1 <- two_ion_MIXDER_var$CA
simpleeffect1 <- two_ion_MIXDER_var$simpleeffect
silicon1 <- two_ion_MIXDER_var$silicon
ironsix1 <- two_ion_MIXDER_var$ironsix
plot(x = d1 * 100, y = CA1 * 100, type = "l", col = "red")
lines(x = d1 * 100, y = simpleeffect1 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d1 * 100, y = silicon1* 100, col = "green")
lines(x = d1 * 100, y = ironsix1* 100, col = "green")
lines(x= d1*100 , y = two_ion_MIXDER_var$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d1*100 , y = two_ion_MIXDER_var$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d1*100,rev(d1*100)),c(two_ion_MIXDER_var$CI_lower * 100, rev(two_ion_MIXDER_var$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
write.csv(two_ion_MIXDER_var, "2ionMonteCarlovar.csv", row.names = F)
#6-ion No Covariance 50 dose
CI_function_MIXDER_var = function(d, d_interested, r, interval = 0.95, L, Z.beta) {
MIXDER_curve = list(0)
for (i in 1:MM) {
MIXDER_curve[[i]] = MIXDER_function(r = r, d = d, L = L, Z.b = Z.b, eta0 = eta0_MC_var[i], eta1 = eta1_MC_var[i], sig0 = sig0_MC_var[i], kap = kap_MC_var[i])
}
info = vector(length = 0)
for (i in 1:MM) {
info = c(info, MIXDER_curve[[i]][, 2][2])
}
info = sort(info)
lower_bound = info[(1-interval)/2*MM]
upper_bound = info[(interval + (1-interval)/2)*MM]
CI = c(lower_bound, upper_bound)
return(CI)
}
six_ion_MIXDER_var = data.frame(d = out[, 1], CA = out[, 2] + 0.00071)
d4 = six_ion_MIXDER_var$d
ninty_five_CI_lower = vector(length = 0)
ninty_five_CI_upper = vector(length = 0)
out = MIXDER_function(r = rep(1/6, times = 6), L = c(75, 100, 125, 175, 195, 240), Z.b = c(595, 690, 770, 1075, 1245, 1585), d = c(seq(0, 0.009, 0.001), seq(0.01, 0.4, by = 0.01)))
six_ion_MIXDER3 = data.frame(d = out[, 1][seq(1,51, by = 5)], CA = out[, 2][seq(1,51, by = 5)] + 0.00071)
d3 = six_ion_MIXDER3$d
#This is for the six_ion synergy analysis incorporating our monte carlo simulations with the yellow ribbon as the 95% confidence interval using our monte carlo simulated parameters with two panels for two methods of the MC simulation. Similarly, blues curves are individual IDERs and red curve the mixed IDER and the black the simple effect addtivity curve.
#First the MIXDER of the true curve
d3 = c(seq(0, 0.009, 0.001), seq(0.01, 0.4, by = 0.01))
out = MIXDER_function(r = rep(1/6, times = 6), L = c(75, 100, 125, 175, 195, 240), Z.b = c(595, 690, 770, 1075, 1245, 1585), d = c(seq(0, 0.009, 0.001), seq(0.01, 0.4, by = 0.01)))
six_ion_MIXDER = data.frame(d = out[, 1], CA = out[, 2] + 0.00071)
#six_ion_MIXDER3 = data.frame(d = out[, 1], CA = out[, 2] + 0.00071)  #This is the full 50 dose version.
#d3 = six_ion_MIXDER3$d
#6-ion No Covariance 50 dose
CI_function_MIXDER_var = function(d, d_interested, r, interval = 0.95, L, Z.beta) {
MIXDER_curve = list(0)
for (i in 1:MM) {
MIXDER_curve[[i]] = MIXDER_function(r = r, d = d, L = L, Z.b = Z.b, eta0 = eta0_MC_var[i], eta1 = eta1_MC_var[i], sig0 = sig0_MC_var[i], kap = kap_MC_var[i])
}
info = vector(length = 0)
for (i in 1:MM) {
info = c(info, MIXDER_curve[[i]][, 2][2])
}
info = sort(info)
lower_bound = info[(1-interval)/2*MM]
upper_bound = info[(interval + (1-interval)/2)*MM]
CI = c(lower_bound, upper_bound)
return(CI)
}
six_ion_MIXDER_var = six_ion_MIXDER
ninty_five_CI_lower = vector(length = 0)
ninty_five_CI_upper = vector(length = 0)
a = vector(length = 0)
for (i in 2:length(d3)) {
a = CI_function_MIXDER_var(d = c(0, six_ion_MIXDER_var$d[i]), r = rep(1/6, times = 6), L = c(75, 100, 125, 175, 195, 240), Z.b = c(595, 690, 770, 1075, 1245, 1585))
ninty_five_CI_lower = c(ninty_five_CI_lower, a[1])
ninty_five_CI_upper = c(ninty_five_CI_upper, a[2])
}
six_ion_MIXDER_var$CI_lower = c(0, ninty_five_CI_lower + 0.00071)
six_ion_MIXDER_var$CI_upper = c(0, ninty_five_CI_upper + 0.00071)
#Get the simple effect additivity MIXDER
six_ion_MIXDER_var$simpleeffect = IDER(d = 1/6*d3, L = 125, Z.b = 770) + IDER(d = 1/6*d3, L = 175, Z.b = 1075) + IDER(d = 1/6*d3, L = 75, Z.b = 595) + IDER(d = 1/6*d3, L = 100, Z.b = 690) + IDER(d = 1/6*d3, L = 195, Z.b = 1245) + IDER(d = 1/6*d3, L = 240, Z.b = 1585) + 0.00071
#Get the individual IDERS
six_ion_MIXDER_var$oxygen = IDER(d = d3, L = 75, Z.b = 595) + 0.00071
six_ion_MIXDER_var$silicon = IDER(d = d3, L = 100, Z.b = 690) + 0.00071
six_ion_MIXDER_var$titanium = IDER(d = d3, L = 125, Z.b = 770) + 0.00071
six_ion_MIXDER_var$ironsix = IDER(d = d3, L = 175, Z.b = 1075) + 0.00071
six_ion_MIXDER_var$ironfour = IDER(d = d3, L = 195, Z.b = 1245) + 0.00071
six_ion_MIXDER_var$ironthree = IDER(d = d3, L = 240, Z.b = 1585) + 0.00071
write.csv(six_ion_MIXDER_var, "6ionMonteCarlovar.csv", row.names = F)
library(deSolve) # package for solving differential equations
library(minpack.lm) # package for non-linear regression #rks to laz: I think we probably can just use nls() in stats, not nlsLM from linpack. Please check in R documentation if there is any functional difference at all
library(mvtnorm) # package for calculating confidence intervals by Monte Carlo simulation based on variance-covariance matrices #rks to laz: I added to comment.Please check that my addition is OK.
#rm(list=ls())
set.seed(19970101)
####2-ion 60 dose
d_2ion = c(seq(0, 0.009, 0.001), seq(0.01, 0.5, by = 0.01))
#Assuming the working directory is the location of this R file (On Github the csv file is in the same location as this R file)
two_ion_MIXDER = read.csv("2ionMonteCarlo.csv") #This is the Monte Carlo results with seed 19970101
#The graphing part
d1 <- two_ion_MIXDER$d
CA1 <- two_ion_MIXDER$CA
simpleeffect1 <- two_ion_MIXDER$simpleeffect
silicon1 <- two_ion_MIXDER$silicon
ironsix1 <- two_ion_MIXDER$ironsix
plot(x = d1 * 100, y = CA1 * 100, type = "l", col = "red", main="2-ion Model", sub="Full 60 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d1 * 100, y = simpleeffect1 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d1 * 100, y = silicon1* 100, col = "green")
lines(x = d1 * 100, y = ironsix1* 100, col = "green")
lines(x= d1*100 , y = two_ion_MIXDER$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d1*100 , y = two_ion_MIXDER$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d1*100,rev(d1*100)),c(two_ion_MIXDER$CI_lower * 100, rev(two_ion_MIXDER$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####2-ion 12 dose
d_2ion_small = d[seq(1,60, by = 5)]
two_ion_MIXDER_small <- two_ion_MIXDER[seq(1,60, by = 5), ]
#The graphing part
d2 <- two_ion_MIXDER_small$d
CA2 <- two_ion_MIXDER_small$CA
simpleeffect2 <- two_ion_MIXDER_small$simpleeffect
silicon2 <- two_ion_MIXDER_small$silicon
ironsix2 <- two_ion_MIXDER_small$ironsix
plot(x = d2 * 100, y = CA2 * 100, type = "l", col = "red", main="2-ion Model", sub="12 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d2 * 100, y = simpleeffect2 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d2 * 100, y = silicon2* 100, col = "green")
lines(x = d2 * 100, y = ironsix2* 100, col = "green")
lines(x= d2*100 , y = two_ion_MIXDER_small$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d2*100 , y = two_ion_MIXDER_small$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d2*100,rev(d2*100)),c(two_ion_MIXDER_small$CI_lower * 100, rev(two_ion_MIXDER_small$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####2-ion 60 dose without covariances (larger CI's)
#Assuming the working directory is the location of this R file (On Github the csv file is in the same location as this R file)
two_ion_MIXDER_small_var <- read.csv("2ionMonteCarlovar.csv")
#The graphing part
plot(x = d1 * 100, y = CA1 * 100, type = "l", col = "red", main="2-ion Model", sub="12 Doses without Covariances",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d1 * 100, y = simpleeffect1 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d1 * 100, y = silicon1* 100, col = "green")
lines(x = d1 * 100, y = ironsix1* 100, col = "green")
lines(x= d1*100 , y = two_ion_MIXDER_small_var$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d1*100 , y = two_ion_MIXDER_small_var$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d1*100,rev(d1*100)),c(two_ion_MIXDER_small_var$CI_lower * 100, rev(two_ion_MIXDER_small_var$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####6-ion 50 dose
d_6ion <- c(seq(0, 0.009, 0.001), seq(0.01, 0.4, by = 0.01))
six_ion_MIXDER <- read.csv("6ionMonteCarlo.csv")
#the graphing part
d11 <- six_ion_MIXDER$d
CA11 <- six_ion_MIXDER$CA
simpleeffect11 <- six_ion_MIXDER$simpleeffect
silicon11 <- six_ion_MIXDER$silicon
titanium11 <- six_ion_MIXDER$titanium
ironthree11 <- six_ion_MIXDER$ironthree
ironfour11 <- six_ion_MIXDER$ironfour
ironsix11 <- six_ion_MIXDER$ironsix
oxygen11 <- six_ion_MIXDER$oxygen
plot(x = d11 * 100, y = CA11 * 100, type = "l", col = "red", main="6-ion Model", sub="Full 50 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d11 * 100, y = simpleeffect11 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d11 * 100, y = silicon11* 100, col = "green")
lines(x = d11 * 100, y = titanium11* 100, col = "green")
lines(x = d11 * 100, y = ironthree11* 100, col = "green")
lines(x = d11 * 100, y = ironfour11* 100, col = "green")
lines(x = d11 * 100, y = ironsix11* 100, col = "green")
lines(x = d11 * 100, y = oxygen11* 100, col = "green")
lines(x= d11*100 , y = six_ion_MIXDER$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d11*100 , y = six_ion_MIXDER$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d11*100,rev(d11*100)),c(six_ion_MIXDER$CI_lower * 100, rev(six_ion_MIXDER$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####6-ion 10 dose
d_6ion_small <- d_6ion[seq(1, 50, by = 5)]
six_ion_MIXDER_small <- six_ion_MIXDER[seq(1, 50, by = 5),]
#the graphing part
d22 <- six_ion_MIXDER_small$d
CA22 <- six_ion_MIXDER_small$CA
simpleeffect22 <- six_ion_MIXDER_small$simpleeffect
silicon22 <- six_ion_MIXDER_small$silicon
titanium22 <- six_ion_MIXDER_small$titanium
ironthree22 <- six_ion_MIXDER_small$ironthree
ironfour22 <- six_ion_MIXDER_small$ironfour
ironsix22 <- six_ion_MIXDER_small$ironsix
oxygen22 <- six_ion_MIXDER_small$oxygen
plot(x = d22 * 100, y = CA22 * 100, type = "l", col = "red", main="6-ion Model", sub="10 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d22 * 100, y = simpleeffect22 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d22 * 100, y = silicon22* 100, col = "green")
lines(x = d22 * 100, y = titanium22* 100, col = "green")
lines(x = d22 * 100, y = ironthree22* 100, col = "green")
lines(x = d22 * 100, y = ironfour22* 100, col = "green")
lines(x = d22 * 100, y = ironsix22* 100, col = "green")
lines(x = d22 * 100, y = oxygen22* 100, col = "green")
lines(x= d22*100 , y = six_ion_MIXDER_small$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d22*100 , y = six_ion_MIXDER_small$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d22*100,rev(d22*100)),c(six_ion_MIXDER_small$CI_lower * 100, rev(six_ion_MIXDER_small$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####6-ion 10 dose without covariances (larger Ci's)
six_ion_MIXDER_small_var <- read.csv("6ionMonteCarlovar.csv")
#the graphing part
d22 <- six_ion_MIXDER_small_var$d
CA22 <- six_ion_MIXDER_small_var$CA
simpleeffect22 <- six_ion_MIXDER_small_var$simpleeffect
silicon22 <- six_ion_MIXDER_small_var$silicon
titanium22 <- six_ion_MIXDER_small_var$titanium
ironthree22 <- six_ion_MIXDER_small_var$ironthree
ironfour22 <- six_ion_MIXDER_small_var$ironfour
ironsix22 <- six_ion_MIXDER_small_var$ironsix
oxygen22 <- six_ion_MIXDER_small_var$oxygen
plot(x = d22 * 100, y = CA22 * 100, type = "l", col = "red", main="6-ion Model", sub="10 Doses without Covariances",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d22 * 100, y = simpleeffect22 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d22 * 100, y = silicon22* 100, col = "green")
lines(x = d22 * 100, y = titanium22* 100, col = "green")
lines(x = d22 * 100, y = ironthree22* 100, col = "green")
lines(x = d22 * 100, y = ironfour22* 100, col = "green")
lines(x = d22 * 100, y = ironsix22* 100, col = "green")
lines(x = d22 * 100, y = oxygen22* 100, col = "green")
lines(x= d22*100 , y = six_ion_MIXDER_small_var$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d22*100 , y = six_ion_MIXDER_small_var$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d22*100,rev(d22*100)),c(six_ion_MIXDER_small_var$CI_lower * 100, rev(six_ion_MIXDER_small_var$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####6-ion 50 dose without covariances (larger Ci's)
six_ion_MIXDER_var <- read.csv("6ionMonteCarlovar.csv")
#the graphing part
d22 <- six_ion_MIXDER_var$d
CA22 <- six_ion_MIXDER_var$CA
simpleeffect22 <- six_ion_MIXDER_var$simpleeffect
silicon22 <- six_ion_MIXDER_var$silicon
titanium22 <- six_ion_MIXDER_var$titanium
ironthree22 <- six_ion_MIXDER_var$ironthree
ironfour22 <- six_ion_MIXDER_var$ironfour
ironsix22 <- six_ion_MIXDER_var$ironsix
oxygen22 <- six_ion_MIXDER_var$oxygen
plot(x = d22 * 100, y = CA22 * 100, type = "l", col = "red", main="6-ion Model", sub="10 Doses without Covariances",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d22 * 100, y = simpleeffect22 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d22 * 100, y = silicon22* 100, col = "green")
lines(x = d22 * 100, y = titanium22* 100, col = "green")
lines(x = d22 * 100, y = ironthree22* 100, col = "green")
lines(x = d22 * 100, y = ironfour22* 100, col = "green")
lines(x = d22 * 100, y = ironsix22* 100, col = "green")
lines(x = d22 * 100, y = oxygen22* 100, col = "green")
lines(x= d22*100 , y = six_ion_MIXDER_var$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d22*100 , y = six_ion_MIXDER_var$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d22*100,rev(d22*100)),c(six_ion_MIXDER_var$CI_lower * 100, rev(six_ion_MIXDER_var$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
#Assuming the working directory is the location of this R file (On Github the csv file is in the same location as this R file)
two_ion_MIXDER_var <- read.csv("2ionMonteCarlovar.csv")
#The graphing part
plot(x = d1 * 100, y = CA1 * 100, type = "l", col = "red", main="2-ion Model", sub="60 Doses without Covariances",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d1 * 100, y = simpleeffect1 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d1 * 100, y = silicon1* 100, col = "green")
lines(x = d1 * 100, y = ironsix1* 100, col = "green")
lines(x= d1*100 , y = two_ion_MIXDER_var$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d1*100 , y = two_ion_MIXDER_var$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d1*100,rev(d1*100)),c(two_ion_MIXDER_var$CI_lower * 100, rev(two_ion_MIXDER_var$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
#rm(list=ls())
set.seed(19970101)
####2-ion 60 dose
d_2ion = c(seq(0, 0.009, 0.001), seq(0.01, 0.5, by = 0.01))
#Assuming the working directory is the location of this R file (On Github the csv file is in the same location as this R file)
two_ion_MIXDER = read.csv("2ionMonteCarlo.csv") #This is the Monte Carlo results with seed 19970101
#The graphing part
d1 <- two_ion_MIXDER$d
CA1 <- two_ion_MIXDER$CA
simpleeffect1 <- two_ion_MIXDER$simpleeffect
silicon1 <- two_ion_MIXDER$silicon
ironsix1 <- two_ion_MIXDER$ironsix
plot(x = d1 * 100, y = CA1 * 100, type = "l", col = "red", main="2-ion Model", sub="Full 60 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d1 * 100, y = simpleeffect1 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d1 * 100, y = silicon1* 100, col = "green")
lines(x = d1 * 100, y = ironsix1* 100, col = "green")
lines(x= d1*100 , y = two_ion_MIXDER$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d1*100 , y = two_ion_MIXDER$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d1*100,rev(d1*100)),c(two_ion_MIXDER$CI_lower * 100, rev(two_ion_MIXDER$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
d1
simpleeffect1
two_ion_MIXDER
#Assuming the working directory is the location of this R file (On Github the csv file is in the same location as this R file)
two_ion_MIXDER = read.csv("2ionMonteCarlo.csv") #This is the Monte Carlo results with seed 19970101
setwd("C:/Users/peter/OneDrive/UC Berkeley/Research/Radiology, Sachs/Github Repo/URAP.CA/Graphs")
library(deSolve) # package for solving differential equations
library(minpack.lm) # package for non-linear regression #rks to laz: I think we probably can just use nls() in stats, not nlsLM from linpack. Please check in R documentation if there is any functional difference at all
library(mvtnorm) # package for calculating confidence intervals by Monte Carlo simulation based on variance-covariance matrices #rks to laz: I added to comment.Please check that my addition is OK.
#rm(list=ls())
set.seed(19970101)
####2-ion 60 dose
d_2ion = c(seq(0, 0.009, 0.001), seq(0.01, 0.5, by = 0.01))
#Assuming the working directory is the location of this R file (On Github the csv file is in the same location as this R file)
two_ion_MIXDER = read.csv("2ionMonteCarlo.csv") #This is the Monte Carlo results with seed 19970101
#The graphing part
d1 <- two_ion_MIXDER$d
CA1 <- two_ion_MIXDER$CA
simpleeffect1 <- two_ion_MIXDER$simpleeffect
silicon1 <- two_ion_MIXDER$silicon
ironsix1 <- two_ion_MIXDER$ironsix
plot(x = d1 * 100, y = CA1 * 100, type = "l", col = "red", main="2-ion Model", sub="Full 60 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d1 * 100, y = simpleeffect1 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d1 * 100, y = silicon1* 100, col = "green")
lines(x = d1 * 100, y = ironsix1* 100, col = "green")
lines(x= d1*100 , y = two_ion_MIXDER$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d1*100 , y = two_ion_MIXDER$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d1*100,rev(d1*100)),c(two_ion_MIXDER$CI_lower * 100, rev(two_ion_MIXDER$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####2-ion 12 dose
d_2ion_small = d[seq(1,60, by = 5)]
two_ion_MIXDER_small <- two_ion_MIXDER[seq(1,60, by = 5), ]
#The graphing part
d2 <- two_ion_MIXDER_small$d
CA2 <- two_ion_MIXDER_small$CA
simpleeffect2 <- two_ion_MIXDER_small$simpleeffect
silicon2 <- two_ion_MIXDER_small$silicon
ironsix2 <- two_ion_MIXDER_small$ironsix
plot(x = d2 * 100, y = CA2 * 100, type = "l", col = "red", main="2-ion Model", sub="12 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d2 * 100, y = simpleeffect2 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d2 * 100, y = silicon2* 100, col = "green")
lines(x = d2 * 100, y = ironsix2* 100, col = "green")
lines(x= d2*100 , y = two_ion_MIXDER_small$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d2*100 , y = two_ion_MIXDER_small$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d2*100,rev(d2*100)),c(two_ion_MIXDER_small$CI_lower * 100, rev(two_ion_MIXDER_small$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####2-ion 60 dose without covariances (larger CI's)
#Assuming the working directory is the location of this R file (On Github the csv file is in the same location as this R file)
two_ion_MIXDER_var <- read.csv("2ionMonteCarlovar.csv")
#The graphing part
plot(x = d1 * 100, y = CA1 * 100, type = "l", col = "red", main="2-ion Model", sub="60 Doses without Covariances",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d1 * 100, y = simpleeffect1 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d1 * 100, y = silicon1* 100, col = "green")
lines(x = d1 * 100, y = ironsix1* 100, col = "green")
lines(x= d1*100 , y = two_ion_MIXDER_var$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d1*100 , y = two_ion_MIXDER_var$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d1*100,rev(d1*100)),c(two_ion_MIXDER_var$CI_lower * 100, rev(two_ion_MIXDER_var$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####6-ion 50 dose
d_6ion <- c(seq(0, 0.009, 0.001), seq(0.01, 0.4, by = 0.01))
six_ion_MIXDER <- read.csv("6ionMonteCarlo.csv")
#the graphing part
d11 <- six_ion_MIXDER$d
CA11 <- six_ion_MIXDER$CA
simpleeffect11 <- six_ion_MIXDER$simpleeffect
silicon11 <- six_ion_MIXDER$silicon
titanium11 <- six_ion_MIXDER$titanium
ironthree11 <- six_ion_MIXDER$ironthree
ironfour11 <- six_ion_MIXDER$ironfour
ironsix11 <- six_ion_MIXDER$ironsix
oxygen11 <- six_ion_MIXDER$oxygen
plot(x = d11 * 100, y = CA11 * 100, type = "l", col = "red", main="6-ion Model", sub="Full 50 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d11 * 100, y = simpleeffect11 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d11 * 100, y = silicon11* 100, col = "green")
lines(x = d11 * 100, y = titanium11* 100, col = "green")
lines(x = d11 * 100, y = ironthree11* 100, col = "green")
lines(x = d11 * 100, y = ironfour11* 100, col = "green")
lines(x = d11 * 100, y = ironsix11* 100, col = "green")
lines(x = d11 * 100, y = oxygen11* 100, col = "green")
lines(x= d11*100 , y = six_ion_MIXDER$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d11*100 , y = six_ion_MIXDER$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d11*100,rev(d11*100)),c(six_ion_MIXDER$CI_lower * 100, rev(six_ion_MIXDER$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####6-ion 10 dose
d_6ion_small <- d_6ion[seq(1, 50, by = 5)]
six_ion_MIXDER_small <- six_ion_MIXDER[seq(1, 50, by = 5),]
#the graphing part
d22 <- six_ion_MIXDER_small$d
CA22 <- six_ion_MIXDER_small$CA
simpleeffect22 <- six_ion_MIXDER_small$simpleeffect
silicon22 <- six_ion_MIXDER_small$silicon
titanium22 <- six_ion_MIXDER_small$titanium
ironthree22 <- six_ion_MIXDER_small$ironthree
ironfour22 <- six_ion_MIXDER_small$ironfour
ironsix22 <- six_ion_MIXDER_small$ironsix
oxygen22 <- six_ion_MIXDER_small$oxygen
plot(x = d22 * 100, y = CA22 * 100, type = "l", col = "red", main="6-ion Model", sub="10 Doses",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d22 * 100, y = simpleeffect22 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d22 * 100, y = silicon22* 100, col = "green")
lines(x = d22 * 100, y = titanium22* 100, col = "green")
lines(x = d22 * 100, y = ironthree22* 100, col = "green")
lines(x = d22 * 100, y = ironfour22* 100, col = "green")
lines(x = d22 * 100, y = ironsix22* 100, col = "green")
lines(x = d22 * 100, y = oxygen22* 100, col = "green")
lines(x= d22*100 , y = six_ion_MIXDER_small$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d22*100 , y = six_ion_MIXDER_small$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d22*100,rev(d22*100)),c(six_ion_MIXDER_small$CI_lower * 100, rev(six_ion_MIXDER_small$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
####6-ion 50 dose without covariances (larger Ci's)
six_ion_MIXDER_var <- read.csv("6ionMonteCarlovar.csv")
#the graphing part
d22 <- six_ion_MIXDER_var$d
CA22 <- six_ion_MIXDER_var$CA
simpleeffect22 <- six_ion_MIXDER_var$simpleeffect
silicon22 <- six_ion_MIXDER_var$silicon
titanium22 <- six_ion_MIXDER_var$titanium
ironthree22 <- six_ion_MIXDER_var$ironthree
ironfour22 <- six_ion_MIXDER_var$ironfour
ironsix22 <- six_ion_MIXDER_var$ironsix
oxygen22 <- six_ion_MIXDER_var$oxygen
plot(x = d22 * 100, y = CA22 * 100, type = "l", col = "red", main="6-ion Model", sub="50 Doses without Covariances",
xlab="Dose * 100", ylab="CA * 100")
lines(x = d22 * 100, y = simpleeffect22 * 100, col = "black", lty = 2, lwd = 0.5)
lines(x = d22 * 100, y = silicon22* 100, col = "green")
lines(x = d22 * 100, y = titanium22* 100, col = "green")
lines(x = d22 * 100, y = ironthree22* 100, col = "green")
lines(x = d22 * 100, y = ironfour22* 100, col = "green")
lines(x = d22 * 100, y = ironsix22* 100, col = "green")
lines(x = d22 * 100, y = oxygen22* 100, col = "green")
lines(x= d22*100 , y = six_ion_MIXDER_var$CI_upper * 100, lty = 'dashed', col = 'red')
lines(x= d22*100 , y = six_ion_MIXDER_var$CI_lower * 100, lty = 'dashed', col = 'red')
polygon(c(d22*100,rev(d22*100)),c(six_ion_MIXDER_var$CI_lower * 100, rev(six_ion_MIXDER_var$CI_upper * 100)),col = rgb(1, 0, 0,0.5), border = NA)
